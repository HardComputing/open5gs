/* Top EDL file. */

enclave {
    include "time.h"

	from "sgx_tstdc.edl" import *;


    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
    
    //from "Edger8rSyntax/Types.edl" import *;
    //from "Edger8rSyntax/Pointers.edl" import *;
    //from "Edger8rSyntax/Arrays.edl" import *;
    //from "Edger8rSyntax/Functions.edl" import *;

    //from "TrustedLibrary/Libc.edl" import *;
    //from "TrustedLibrary/Libcxx.edl" import ecall_exception, ecall_map;
    //from "TrustedLibrary/Thread.edl" import *;
    
    from "sgx_tprotected_fs.edl" import *;

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
     
     trusted{
      //  public int ecall_start_dtls_server(int client);
     //public int sgx_ngap_decode(
     //       [in,out, size=len]char* str, size_t len
     //   );
    
 //   public int sgx_test_array(
   //         [in,out, size=len]char* str, size_t len
   //     );

   // public void * sgx_ngap_decode_ecall([in, size= pkbuf_size] const void *pkbuf_data, size_t pkbuf_size);
    public int ecall_initialization();
   // public int ecall_dtls_server_close(int client);
  //  public int ecall_dtls_recv_handler(int client_fd, [out, size=buf_size] char *output_buf, size_t buf_size);
   // public int ecall_dtls_recv_handler_test(int client);
   // public void *ecall_dtls_recv_and_ngap_decode(int client);

     };
     
     
    untrusted {
    //    void error([in, string] const char *str);
        void ocall_print_string([in, string] const char *str);
    //    long ocall_sgx_clock(void); // For performance evaluation
    //    time_t ocall_sgx_time([out, size=t_len]time_t *timep, int t_len);
    //    struct tm *ocall_sgx_localtime([in, size=t_len]const time_t *timep, int t_len);
    //    struct tm *ocall_sgx_gmtime_r([in, size=t_len]const time_t *timep, int t_len, [out, size=tmp_len]struct tm *tmp, int tmp_len);
    //    int ocall_sgx_gettimeofday([in, out, size=tv_size]void *tv, int tv_size); 
    //    int ocall_sgx_getsockopt(int s, int level, int optname, [out, size=optval_len]char *optval, int optval_len, [in,out, size=4]int* optlen);
    //    int ocall_sgx_setsockopt(int s, int level, int optname, [in, size=optlen]const void *optval, int optlen);
    //    int ocall_sgx_socket(int af, int type, int protocol);
    //    int ocall_sgx_listen(int s, int backlog);
    //    int ocall_sgx_bind(int s, [in, size=addr_size]const void *addr, int addr_size);
    //    int ocall_sgx_connect(int s, [in, size=addrlen]const void *addr, int addrlen);
    //    int ocall_sgx_accept(int s, [out, size=addr_size]void *addr, int addr_size, [in, out, size=4]int *addrlen);
    //    int ocall_sgx_shutdown(int fd, int how);
    //    int ocall_sgx_read(int fd, [out, size=n]void *buf, int n);
    //    int ocall_sgx_write(int fd, [in, size=n]const void *buf, int n);
    //    int ocall_sgx_close(int fd);
    //    int ocall_sgx_getenv([in,size=envlen]const char *env, int envlen, [out,size=ret_len]char *ret_str,int ret_len);
        
    };

};
